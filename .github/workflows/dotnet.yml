# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore
  Test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install dependencies
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
    - name: Restore dependencies
      run: dotnet restore Project-Process-and-Tools-v2.sln
    - name: Build Solution
      run: dotnet build Project-Process-and-Tools-v2.sln --no-restore --configuration Debug
    - name: Test
      run: dotnet test TestProject1/TestProject1.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"
    - name: Display Coverage Report
      run: |
        echo "Displaying Coverage Report:"
        cat TestProject1/TestResults/*/coverage.cobertura.xml
    - name: Extract Line Rate
      run: |
        line_rate=$(xmllint --xpath 'string(/coverage/@line-rate)' TestProject1/TestResults/*/coverage.cobertura.xml)
        echo "Line Rate: $line_rate"
        if (( $(echo "$line_rate < 0.70" | bc -l) )); then
          echo "Code coverage is below the threshold of 70%."
          exit 1
        fi
  
  Integration_test_in_C_sharp:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  # Adjust to your .NET version
      - name: Restore dependencies
        run: dotnet restore
      - name: Build API project
        run: dotnet build Project-Process-and-Tools-v2.sln --no-restore --configuration Debug
      - name: Run integration tests
        run: dotnet test IntegrationTests/IntegrationTests.csproj --no-build --verbosity normal
  
  Integration_test_in_python:
    runs-on: ubuntu-latest  # You can change this to a different OS if needed (e.g., windows-latest or macos-latest)
    needs: build

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'  # Specify your .NET version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13  # Specify the Python version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Restore .NET dependencies
        run: dotnet restore  # This restores the .NET dependencies

      - name: Build the .NET project
        run: dotnet build  # This builds your .NET project

      - name: Start API server in background
        run: |
          dotnet run CargoHub/CargoHub.csproj --urls http://localhost:3000
          sleep 5  # Wait for the server to start

      - name: Run Python tests
        run: |
          pytest PythonIntegrationTests